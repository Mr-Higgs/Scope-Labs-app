{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\13053\\\\Desktop\\\\ScopeLabs\\\\app\\\\src\\\\components\\\\CommentList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './CommentList.scss';\nimport placeholder from '../assets/images/placeholder-image-icon-12.jpg';\n\n/*\r\n  CommentList component displays a list of comments for a given video.\r\n  It fetches comments from the API and displays them in a list.\r\n \r\n- The ID of the video for which comments are being fetched.\r\n- The JSX element displaying the list of comments.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentList = ({\n  videoId\n}) => {\n  _s();\n  // State hooks to store the comments and any error that occurs during fetching.\n  const [comments, setComments] = useState([]);\n  const [error, setError] = useState(null);\n\n  // useEffect hook to fetch comments from the API when the component mounts or when the videoId changes.\n  useEffect(() => {\n    // Async function to fetch comments from the API.\n    const fetchComments = async () => {\n      try {\n        // Make a GET request to the comments API endpoint, passing the videoId as a parameter.\n        const response = await axios.get('https://take-home-assessment-423502.uc.r.appspot.com/api/videos/comments', {\n          params: {\n            video_id: videoId\n          }\n        });\n        console.log('API Response:', response.data); // Debug log\n\n        // Extract the comments array from the response data.\n        const commentArray = response.data.comments;\n\n        // Check if the extracted comments array is an array.\n        if (Array.isArray(commentArray)) {\n          console.log('Setting comments:', commentArray);\n          // Update the comments state with the extracted comments array.\n          setComments(commentArray);\n        } else {\n          // If the comments data is not an array, set the error state.\n          setError('Comments data is not an array');\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        // If there's an error fetching comments, set the error state.\n        setError(`Failed to fetch comments: ${error.message}`);\n      }\n    };\n    // Call the fetchComments function when the component mounts or when the videoId changes.\n    fetchComments();\n  }, [videoId]);\n\n  // If there's an error, display it.\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If there are no errors, display the list of comments.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"commentdisplay\",\n    children: /* Map over the comments array and display each comment in a list item. */\n    comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentdisplay__comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"commentdisplay__comment-image\",\n        src: placeholder // Use a placeholder image for the avatar.\n        ,\n        alt: \"Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"commentdisplay__comment-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"commentdisplay__comment-column-content-name\",\n          children: [comment.user_id, \" // Display the user ID of the comment author.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"commentdisplay__comment-column-text\",\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), \" // Display the content of the comment.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentList, \"Wf5xTvLvWkqFLbGZI3bpWKQfmpM=\");\n_c = CommentList;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","axios","placeholder","jsxDEV","_jsxDEV","CommentList","videoId","_s","comments","setComments","error","setError","fetchComments","response","get","params","video_id","console","log","data","commentArray","Array","isArray","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","comment","src","alt","user_id","content","id","_c","$RefreshReg$"],"sources":["C:/Users/13053/Desktop/ScopeLabs/app/src/components/CommentList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './CommentList.scss';\r\nimport placeholder from '../assets/images/placeholder-image-icon-12.jpg'\r\n\r\n/*\r\n  CommentList component displays a list of comments for a given video.\r\n  It fetches comments from the API and displays them in a list.\r\n \r\n- The ID of the video for which comments are being fetched.\r\n- The JSX element displaying the list of comments.\r\n */\r\nconst CommentList = ({ videoId }) => {\r\n    // State hooks to store the comments and any error that occurs during fetching.\r\n    const [comments, setComments] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    // useEffect hook to fetch comments from the API when the component mounts or when the videoId changes.\r\n    useEffect(() => {\r\n        // Async function to fetch comments from the API.\r\n        const fetchComments = async () => {\r\n            try {\r\n                // Make a GET request to the comments API endpoint, passing the videoId as a parameter.\r\n                const response = await axios.get('https://take-home-assessment-423502.uc.r.appspot.com/api/videos/comments', { params: { video_id: videoId } });\r\n                console.log('API Response:', response.data); // Debug log\r\n\r\n                // Extract the comments array from the response data.\r\n                const commentArray = response.data.comments;\r\n\r\n                // Check if the extracted comments array is an array.\r\n                if (Array.isArray(commentArray)) {\r\n                    console.log('Setting comments:', commentArray);\r\n                    // Update the comments state with the extracted comments array.\r\n                    setComments(commentArray);\r\n                } else {\r\n                    // If the comments data is not an array, set the error state.\r\n                    setError('Comments data is not an array');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching comments:', error);\r\n                // If there's an error fetching comments, set the error state.\r\n                setError(`Failed to fetch comments: ${error.message}`);\r\n            }\r\n        };\r\n        // Call the fetchComments function when the component mounts or when the videoId changes.\r\n        fetchComments();\r\n    }, [videoId]);\r\n\r\n    // If there's an error, display it.\r\n    if (error) {\r\n        return <div className=\"error\">{error}</div>;\r\n    }\r\n\r\n    // If there are no errors, display the list of comments.\r\n    return (\r\n        <div className=\"commentdisplay\">\r\n            {/* Map over the comments array and display each comment in a list item. */\r\n            comments.map(comment => (\r\n                <div className=\"commentdisplay__comment\" key={comment.id} >\r\n                    <img\r\n                        className=\"commentdisplay__comment-image\"\r\n                        src={placeholder} // Use a placeholder image for the avatar.\r\n                        alt=\"Avatar\" />\r\n                    <div className=\"commentdisplay__comment-column\">\r\n                        <h4 className=\"commentdisplay__comment-column-content-name\">\r\n                            {comment.user_id} // Display the user ID of the comment author.\r\n                        </h4>\r\n                        <p className=\"commentdisplay__comment-column-text\">{comment.content}</p> // Display the content of the comment.\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CommentList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}