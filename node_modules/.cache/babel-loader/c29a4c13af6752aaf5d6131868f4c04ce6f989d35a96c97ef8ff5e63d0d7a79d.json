{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\13053\\\\Desktop\\\\ScopeLabs\\\\app\\\\src\\\\components\\\\CreateComment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './CreateComment.scss';\n\n/**\r\n * CreateComment component allows users to create comments for a given video.\r\n * It uses React hooks to manage state and makes API calls to create comments.\r\n *\r\n * Props:\r\n * - videoId: The ID of the video for which comments are being created.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateComment = ({\n  videoId\n}) => {\n  _s();\n  // State hooks to store the content of the comment, error, and success message.\n  const [content, setContent] = useState(''); // The content of the comment being created.\n  const [error, setError] = useState(null); // Any error that occurs during comment creation.\n  const [success, setSuccess] = useState(null); // Success message to display after comment creation.\n\n  /**\r\n   * Handle form submission event.\r\n   * Send a POST request to the API to create a new comment.\r\n   * Update the state based on the response.\r\n   *\r\n   * @param {Event} e - The form submission event.\r\n   */\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent the default form submission behavior.\n    setError(null); // Reset the error state.\n    setSuccess(null); // Reset the success state.\n    try {\n      // Send a POST request to the API to create a new comment.\n      const response = await axios.post('https://take-home-assessment-423502.uc.r.appspot.com/api/videos/comments', {\n        video_id: videoId,\n        // The ID of the video for which the comment is being created.\n        user_id: 'jerry_pierre',\n        // The user ID of the comment creator (hardcoded for this example).\n        content // The content of the comment.\n      });\n      console.log('Comment created:', response.data); // Debug log.\n      setSuccess('Comment created successfully'); // Update the success state.\n      setContent(''); // Reset the comment content state.\n    } catch (error) {\n      console.error('Error creating comment:', error); // Log the error.\n      setError('Failed to create comment'); // Update the error state.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"commentinput\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"commentinput__tab-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"commentinput__tab-label\",\n          children: \"JOIN THE CONVERSATION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"commentinput__tab-container-input\",\n          type: \"text\",\n          value: content // The content of the comment being created.\n          ,\n          onChange: e => setContent(e.target.value) // Update the comment content state when the input changes.\n          ,\n          placeholder: \"Add a new comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), \" // Placeholder text for the input.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"commentinput__tab-container-button\",\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateComment, \"vWIlRAejOzMAeVVToQb3fNWgJpg=\");\n_c = CreateComment;\nexport default CreateComment;\nvar _c;\n$RefreshReg$(_c, \"CreateComment\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CreateComment","videoId","_s","content","setContent","error","setError","success","setSuccess","handleSubmit","e","preventDefault","response","post","video_id","user_id","console","log","data","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/13053/Desktop/ScopeLabs/app/src/components/CreateComment.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './CreateComment.scss';\r\n\r\n/**\r\n * CreateComment component allows users to create comments for a given video.\r\n * It uses React hooks to manage state and makes API calls to create comments.\r\n *\r\n * Props:\r\n * - videoId: The ID of the video for which comments are being created.\r\n */\r\nconst CreateComment = ({ videoId }) => {\r\n  // State hooks to store the content of the comment, error, and success message.\r\n  const [content, setContent] = useState(''); // The content of the comment being created.\r\n  const [error, setError] = useState(null); // Any error that occurs during comment creation.\r\n  const [success, setSuccess] = useState(null); // Success message to display after comment creation.\r\n \r\n  /**\r\n   * Handle form submission event.\r\n   * Send a POST request to the API to create a new comment.\r\n   * Update the state based on the response.\r\n   *\r\n   * @param {Event} e - The form submission event.\r\n   */\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault(); // Prevent the default form submission behavior.\r\n    setError(null); // Reset the error state.\r\n    setSuccess(null); // Reset the success state.\r\n    try {\r\n      // Send a POST request to the API to create a new comment.\r\n      const response = await axios.post('https://take-home-assessment-423502.uc.r.appspot.com/api/videos/comments', {\r\n        video_id: videoId, // The ID of the video for which the comment is being created.\r\n        user_id: 'jerry_pierre', // The user ID of the comment creator (hardcoded for this example).\r\n        content // The content of the comment.\r\n      });\r\n      console.log('Comment created:', response.data); // Debug log.\r\n      setSuccess('Comment created successfully'); // Update the success state.\r\n      setContent(''); // Reset the comment content state.\r\n    } catch (error) {\r\n      console.error('Error creating comment:', error); // Log the error.\r\n      setError('Failed to create comment'); // Update the error state.\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n    <section className=\"commentinput\">\r\n\r\n\r\n      <form onSubmit={handleSubmit} className=\"commentinput__tab-container\">\r\n\r\n        <div>\r\n          <h5 className=\"commentinput__tab-label\">JOIN THE CONVERSATION</h5>\r\n\r\n          <input className=\"commentinput__tab-container-input\" \r\n          type=\"text\" \r\n          value={content} // The content of the comment being created.\r\n          onChange={(e) => setContent(e.target.value)} // Update the comment content state when the input changes.\r\n          placeholder='Add a new comment'/> // Placeholder text for the input.\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"commentinput__tab-container-button\">\r\n          Add Comment\r\n        </button>\r\n        {/* // Display the error message if there is an error. */}\r\n        {error && <div className=\"error-message\">{error}</div>} \r\n        {/* // Display the success message if the comment was created successfully. */}\r\n        {success && <div className=\"success-message\">{success}</div>} \r\n        \r\n      </form>\r\n    </section>\r\n\r\n    \r\n  );\r\n};\r\n\r\nexport default CreateComment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}